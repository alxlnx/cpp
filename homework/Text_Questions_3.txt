1. Q: Какие два вида концептуальных вида наследования вы можете назвать? Кратко опишите каждый из них. 
A: public = " is a ", private = " is implemented with "
Public: у объекта дочернего класса можно попросить сделать то, что умеет делать его родитель.
Private: попросить нельзя, но дочерний класс может использовать методы родителя при реализации своих (mixin classes)
2. Q: Почему операторы ввода и вывода нельзя реализовать как методы класса? 
A: Можно) (или всё-таки нет?)
class A {
public:
	A(int x, int y) : x{x}, y{y} {}
	
	std::ostream& operator<<(std::ostream& os) {
		os << x << ' ' << y;
		return os;
	}
	
private:
int x, y;
};


int main() {
	A a{4, 5};
	a.operator<<(std::cout);
	return 0;
}
Или так:
class A {
public:
	A(int x, int y) : x{x}, y{y} {}
	
	friend std::ostream& operator<<(std::ostream& os, A a) {
		os << a.x << ' ' << a.y;
		return os;
	}
	
private:
int x, y;
};


int main() {
	A a{4, 5};
	std::cout << a;
	return 0;
}
3. Q: Что такое абстрактный базовый класс, или интерфейс, и как он связан с понятием чистой виртуальной функции?
A: Класс называется абстрактным, если он может быть использован только как базовый класс, т.е. его нельзя инстанциировать (instantiate).
Это можно достичь, либо объявив конструктор такого класса protected/private, либо создав в нём pure virtual function.
Pure virtual function - функция, которая должна быть переписана (overridden) в дочернем классе.
Абстрактные классы обычно определяют интерфейсы для групп связанных (related) классов.